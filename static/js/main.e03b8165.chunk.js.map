{"version":3,"sources":["components/header.js","factories/player.js","factories/battleship.js","factories/gameBoard.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","startText","userMessage","className","onClick","initializeGame","player","type","battleship","length","hit","num","this","positions","isSunk","filter","x","gameBoard","board","Array","from","keys","shipsToPlace","shipsOnBoard","coverdPositions","hoverPositions","lastHitShip","placeNewShip","coordinates","direction","random","hover","splice","placeOneShip","coord_array","split","map","digit","unshift","slice","startPoint","i","includes","parseInt","push","toString","newShip","Math","floor","randNum","round","receiveAttack","difficulty","checkIfCoverd","indexOf","index","checkShip","shipHit","console","log","pop","Main","humanArray","computerArray","computerBoard","humanBoard","humanPositions","computerPositions","humanPlayer","computerPlayer","error","visability","e","color","style","backgroundColor","placeShips","shipDirection","onMouseOver","display","setshipDirection","name","changeDifficulty","recieveAttackCoordinates","App","useState","sethumanPlayer","setcomputerPlayer","gameActive","setgameActive","setuserMessage","setdifficulty","isGameOver","winner","useEffect","document","title","human","computer","humanCopy","Object","assign","computerCopy","humanShot","computerShot","gameOver","randomCoord","level","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e03b8165.chunk.js","sourcesContent":["const Header = (props) => {\r\n    let startText = 'Start Game'\r\n    if (props.userMessage !== 'Start Your Game!'){\r\n      startText = 'Restart Game'\r\n    }\r\n    return (\r\n        <div className='header'>\r\n            <div className='title'>BattleShip</div>\r\n            <div className='messageBox'>{props.userMessage}</div>\r\n            <button className='startButton' onClick={props.initializeGame}>{startText}</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Header","const player = (type) => {\r\n  return {\r\n            type: type\r\n        }\r\n}\r\n\r\nexport default player","const battleship = (length) => {\r\n    return{\r\n        length: length,\r\n        hit(num){\r\n          this.positions[num] = 'X'\r\n          return this.isSunk()\r\n        },\r\n        isSunk(){\r\n          if (this.positions.filter(x => x === 'X').length === this.positions.length){\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n    }\r\n}\r\nexport default battleship","import battleship from \"./battleship\";\r\n\r\nconst gameBoard = () => {\r\n    const board = Array.from(Array(100).keys());\r\n    const shipsToPlace = [2,2,5,5,7];\r\n    const shipsOnBoard = [];\r\n    const coverdPositions = [];\r\n    const hoverPositions = [];\r\n    const lastHitShip = [];\r\n      \r\n    const placeNewShip = (coordinates,direction,random,hover=null) => {\r\n      hoverPositions.splice(0)\r\n        \r\n      const placeOneShip = (coordinates) => {\r\n        let coord_array = ('' + coordinates).split('').map(function(digit)  {return +digit;});\r\n          if (coord_array.length === 1){\r\n            coord_array.unshift(0)\r\n          }\r\n\r\n        const length = shipsToPlace.slice(-1)[0]\r\n        const positions = []\r\n        let startPoint = coord_array[1]\r\n\r\n        if (direction === 'vertical'){\r\n          startPoint = coord_array[0]\r\n        }\r\n        for(var i = 0;i<length;i++){\r\n          if (startPoint > 9 || coverdPositions.includes(parseInt(coordinates))){\r\n            return \"No room for ship\"\r\n            }\r\n            \r\n            if (direction === 'horizontal'){\r\n              positions.push(coordinates)\r\n              coordinates+=1\r\n            }else{\r\n              coordinates = parseInt(coord_array[0].toString() + coord_array[1].toString())\r\n              positions.push(coordinates)\r\n              coord_array[0] +=1\r\n              coordinates = parseInt(coord_array[0].toString() + coord_array[1].toString()) \r\n          } \r\n          startPoint+=1\r\n            } \r\n\r\n          if (hover) {\r\n            hoverPositions.push(...positions)\r\n            return hoverPositions\r\n         } \r\n\r\n          const newShip = battleship(length)\r\n          newShip.positions = positions\r\n          coverdPositions.push(...positions)\r\n          shipsToPlace.splice(-1,1)\r\n          shipsOnBoard.push(newShip)\r\n          return 'New Ship Placed'\r\n        }\r\n\r\n        if  (shipsToPlace.length > 0){\r\n          if (random === true){\r\n            while (shipsToPlace.length !== 0){\r\n              coordinates = Math.floor(Math.random() * 100);\r\n              const randNum = Math.round(Math.random())\r\n              direction = randNum ? \"horizontal\" : \"vertical\" ;\r\n              placeOneShip(coordinates)\r\n            }\r\n            return random\r\n          }\r\n          placeOneShip(coordinates)\r\n      }\r\n      return 'No ships available'\r\n    };\r\n\r\n     const receiveAttack = (coordinates,random,difficulty=null) => {\r\n       const checkIfCoverd = (coordinates) => {\r\n       if (coverdPositions.indexOf(coordinates.toString()) !== -1 || board.indexOf(coordinates.toString()) !== -1){\r\n         return 'Previous'\r\n          }\r\n        }\r\n\r\n       if (random === true){\r\n         while (checkIfCoverd(coordinates) === 'Previous'){\r\n           coordinates = Math.floor(Math.random() * 100)\r\n          }\r\n        }\r\n\r\n        if (checkIfCoverd(coordinates) === 'Previous'){\r\n          return 'This position has already been targeted'\r\n        }\r\n\r\n       if(typeof coordinates === 'string'){\r\n          coordinates = parseInt(coordinates)\r\n        }\r\n\r\n        let index = coverdPositions.indexOf(coordinates)\r\n        \r\n        const checkShip = (shipHit)=>{\r\n          const shipSunk = shipHit.hit(shipHit.positions.indexOf(coordinates))\r\n          if (shipSunk === true){\r\n            index = shipsOnBoard.indexOf(shipHit)\r\n            shipsOnBoard.splice(index,1)\r\n            if (shipsOnBoard.length === 0){\r\n              console.log('Game Over')\r\n              return 'Game Over'\r\n           }\r\n            return 'Battleship was Sunk'\r\n          }\r\n           return `Ship was Hit at [${coordinates}]`\r\n         }\r\n\r\n        if(difficulty === 'hard'){\r\n          if (lastHitShip.length > 0){\r\n            const length = lastHitShip[0].positions.length\r\n            for (var i = 0; i<length; i++){\r\n              if (lastHitShip[0].positions[i] !== 'X'){\r\n                coordinates = lastHitShip[0].positions[i]\r\n                index = coverdPositions.indexOf(coordinates)\r\n                coverdPositions[index] = coverdPositions[index].toString()\r\n                let shipHit = lastHitShip[0]\r\n                return checkShip(shipHit)\r\n              }\r\n            }\r\n            lastHitShip.pop()\r\n          }\r\n        }\r\n        if (coverdPositions.includes(coordinates)){ \r\n          let length = shipsOnBoard.length\r\n           for (i = 0; i < length; i++){\r\n             if (shipsOnBoard[i].positions.includes(coordinates)){\r\n               lastHitShip.push(shipsOnBoard[i])\r\n               coverdPositions[index] = coverdPositions[index].toString()\r\n               let shipHit = shipsOnBoard[i]\r\n               return checkShip(shipHit)\r\n             }\r\n               }  \r\n              } \r\n         board[coordinates] = board[coordinates].toString()\r\n         return 'Missed Shot'\r\n      };\r\n      return{\r\n        board: board,\r\n        shipsToPlace: shipsToPlace,\r\n        shipsOnBoard: shipsOnBoard,\r\n        coverdPositions: coverdPositions,\r\n        hoverPositions: hoverPositions,\r\n        lastHitShip: lastHitShip,\r\n        placeNewShip: placeNewShip,\r\n        receiveAttack: receiveAttack\r\n    };\r\n  };\r\n \r\nexport default gameBoard","const Main = (props) =>{\r\n    \r\n    let humanArray = Array.from(Array(100).keys())\r\n    let computerArray = Array.from(Array(100).keys())\r\n    let computerBoard = []\r\n    let humanBoard = []\r\n    let humanPositions = []\r\n    let computerPositions = []\r\n    let hover = []\r\n\r\n    try {\r\n      humanPositions = props.humanPlayer.gameBoard.coverdPositions\r\n      computerPositions = props.computerPlayer.gameBoard.coverdPositions\r\n      computerBoard = props.computerPlayer.gameBoard.board\r\n      humanBoard = props.humanPlayer.gameBoard.board\r\n      hover = props.humanPlayer.gameBoard.hoverPositions \r\n      } catch (error) {\r\n        //pass\r\n      }\r\n    humanArray  = humanArray.map((x)=>{\r\n      if(humanPositions.includes(x)){\r\n        x = x.toString()\r\n      }\r\n      return x\r\n      })\r\n    \r\n    computerArray = computerArray.map((x)=>{\r\n      if(computerPositions.includes(x)){\r\n        x = x.toString()\r\n      }\r\n      return x\r\n      })\r\n\r\n      let visability = true;\r\n      if(props.userMessage === \"Place Your Ships!\" || props.userMessage === \"Select Your Difficulty!\"){\r\n        visability = false\r\n      }\r\n      \r\n    return(\r\n      <div className=\"boardContainers\">\r\n        <div className='board'>\r\n          <h2>Human Board</h2>\r\n          <div className='boardGrid'>\r\n          {humanArray.map((e) => {\r\n\r\n          let color = \"rgb(15, 12, 206)\"\r\n          if (typeof e === 'string'){\r\n            color = 'green'\r\n          }\r\n          if (humanPositions.includes(e.toString())){\r\n           color = 'red'\r\n          }\r\n          if (hover.includes(e)){\r\n           color = 'purple'\r\n          }\r\n          if(typeof humanBoard[e] === 'string' && humanPositions.includes(e.toString()) === false){\r\n            color = 'black'\r\n          }\r\n        return <div key={e} style={{backgroundColor: color}} \r\n        className='box' \r\n        onClick={()=>{props.placeShips(e,props.shipDirection,false)}}\r\n        onMouseOver={()=>{props.placeShips(e,props.shipDirection,false,true)}}></div>\r\n      })}\r\n     </div>\r\n     </div>\r\n\r\n      <div style={{display: visability ? 'none' : 'block'}}  className='outerContainer'>\r\n        <div className='middleContainer'>\r\n        <div>{props.userMessage === \"Place Your Ships!\"?  \r\n        <div>\r\n       <button onClick={()=>{props.placeShips(0,props.shipDirection,true)}}>Assign Randomly</button>\r\n        <div>Or</div>\r\n        <div>Place them to the board</div>\r\n        <div className='radio'>\r\n        <h4>Direction</h4>\r\n  \r\n        <div>\r\n          <input onClick={()=>{props.setshipDirection('horizontal')}} type=\"radio\"  name=\"direction\"></input>\r\n          <label>Horizontal</label>\r\n        </div>\r\n  \r\n        <div>\r\n          <input onClick={()=>{props.setshipDirection('vertical')}} type=\"radio\" name=\"direction\" ></input>\r\n          <label>Vertical</label>\r\n        </div>\r\n\r\n       </div>\r\n       </div> : \r\n\r\n  \r\n      <div>\r\n       <h4>Difficulty</h4>\r\n\r\n       <div>\r\n         <button onClick={()=>{props.changeDifficulty('easy')}} type=\"radio\"  name=\"difficulty\" >Easy</button>\r\n       </div>\r\n\r\n       <div>\r\n         <button onClick={()=>{props.changeDifficulty('hard')}} type=\"radio\" name=\"difficulty\" >Hard</button>\r\n       </div>\r\n\r\n\r\n     </div>}</div> \r\n     </div>\r\n     </div>\r\n\r\n   <div className='board'>\r\n    <h2>Computer Board</h2>\r\n   <div className='boardGrid'>\r\n\r\n     {computerArray.map((e) => {\r\n    \r\n    let color = \"rgb(15, 12, 206)\"\r\n    \r\n    if (computerPositions.includes(e.toString())){\r\n      color = 'red'\r\n    }\r\n    if(typeof computerBoard[e] === 'string' && computerPositions.includes(e.toString()) === false){\r\n      color = 'black'\r\n    }\r\n    \r\n    return <div key={e} style={{backgroundColor: color}} \r\n    onClick={()=>{props.recieveAttackCoordinates(e)}}className='box'></div>\r\n                 })}\r\n</div>\r\n</div>\r\n  </div>\r\n\r\n    )\r\n\r\n}\r\nexport default Main","import {useState, useEffect} from 'react';\r\nimport Header from './components/header'\r\nimport player from './factories/player'\r\nimport gameBoard from './factories/gameBoard'\r\nimport Main from './components/main.js'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [humanPlayer,sethumanPlayer] = useState({})\r\n  const [computerPlayer,setcomputerPlayer] = useState({})\r\n  const [gameActive,setgameActive] = useState(false)\r\n  const [userMessage,setuserMessage] = useState('Start Your Game!')\r\n  const [shipDirection,setshipDirection] = useState('horizontal')\r\n  const [difficulty,setdifficulty] = useState('easy')\r\n\r\n  const initializeGame = () =>{\r\n    const human = player('human')\r\n    human.gameBoard = gameBoard()\r\n    const computer= player('computer')\r\n    computer.gameBoard = gameBoard()\r\n    sethumanPlayer(human)\r\n    setcomputerPlayer(computer)\r\n    setuserMessage('Place Your Ships!')\r\n    setgameActive(false)\r\n  };\r\n\r\n  const changeDifficulty = (level) => {\r\n    setdifficulty(level)\r\n    setuserMessage('Battle!')\r\n    setgameActive(true)\r\n  };\r\n\r\n  const placeShips = (coordinates,direction,random,hover)=>{ \r\n   if (!gameActive && userMessage === \"Place Your Ships!\"){\r\n     const humanCopy = Object.assign({}, humanPlayer);\r\n     humanCopy.gameBoard.placeNewShip(coordinates,direction,random,hover)\r\n     sethumanPlayer(humanCopy)\r\n\r\n    if(humanPlayer.gameBoard.shipsToPlace.length === 0){\r\n      const computerCopy = Object.assign({}, computerPlayer);\r\n      computerCopy.gameBoard.placeNewShip(0,'horizontal',true)\r\n      setcomputerPlayer(computerCopy)\r\n      setuserMessage('Select Your Difficulty!')\r\n      } \r\n    }\r\n  };\r\n\r\n const recieveAttackCoordinates = (coordinates) =>{\r\n   let humanShot;\r\n   let computerShot\r\n   if (gameActive){\r\n    const computerCopy = Object.assign({}, computerPlayer);\r\n    computerShot = computerCopy.gameBoard.receiveAttack(coordinates,false)\r\n    setcomputerPlayer(computerCopy)\r\n   \r\n    const gameOver = isGameOver('Human')\r\n    \r\n    if (computerShot === 'This position has already been targeted' || gameOver){\r\n      return 0\r\n    }\r\n\r\n    const randomCoord = Math.floor(Math.random() * 100);\r\n    const humanCopy = Object.assign({}, humanPlayer);\r\n    humanShot = humanCopy.gameBoard.receiveAttack(randomCoord,true,difficulty)\r\n\r\n    sethumanPlayer(humanCopy) \r\n    setuserMessage(`Human: ${humanShot} -- Computer: ${computerShot}`)\r\n    isGameOver('Computer')\r\n   }\r\n   return gameActive\r\n };\r\n\r\n const isGameOver = (winner) => {\r\n   if (computerPlayer.gameBoard.shipsOnBoard.length === 0 || humanPlayer.gameBoard.shipsOnBoard.length === 0){\r\n     setgameActive(false)\r\n     setuserMessage(`Game Over -- ${winner} has Won!`)\r\n     return true\r\n    }\r\n    return false\r\n };\r\n useEffect(() => {\r\n  document.title = \"Battleship\"\r\n}, []);\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Header initializeGame={initializeGame} \r\n      gameActive={gameActive} \r\n      userMessage={userMessage} \r\n      setuserMessage={setuserMessage}/>\r\n      \r\n      <Main humanPlayer={humanPlayer} \r\n      computerPlayer={computerPlayer} \r\n      placeShips={placeShips}\r\n      recieveAttackCoordinates={recieveAttackCoordinates}\r\n      userMessage={userMessage}\r\n      shipDirection={shipDirection}\r\n      setshipDirection={setshipDirection}\r\n      changeDifficulty={changeDifficulty}/>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}